{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0ca88d9-6095-40a3-9e50-fd11dbbb294e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "(async () => {\n",
    "  const Web3 = require('web3');\n",
    "  const web3 = new Web3('https://eth-mainnet.g.alchemy.com/v2/ZQ8YoVI_dMIWIH4t7f0LYBAwOG7Zz5te');\n",
    "\n",
    "  const contractAddress = '0xBFbff980083cfBA32252DDdCae709dc0A4964e92';\n",
    "  const yourAddress = '0xB8fc800814bDE58A9DbC9cD21f6BEE62034d8e64';\n",
    "  const yourPrivateKey = '78ac889ce7e817e934bbfa6b5ce920fbb3c511e9db3ba679ac4ec3d8d183c519';\n",
    "  const contractABI = [\n",
    "    {\n",
    "      \"inputs\": [\n",
    "        {\n",
    "          \"internalType\": \"address\",\n",
    "          \"name\": \"account\",\n",
    "          \"type\": \"address\"\n",
    "        }\n",
    "      ],\n",
    "      \"name\": \"balanceOf\",\n",
    "      \"outputs\": [\n",
    "        {\n",
    "          \"internalType\": \"uint256\",\n",
    "          \"name\": \"\",\n",
    "          \"type\": \"uint256\"\n",
    "        }\n",
    "      ],\n",
    "      \"stateMutability\": \"view\",\n",
    "      \"type\": \"function\"\n",
    "    },\n",
    "    {\n",
    "      \"inputs\": [\n",
    "        {\n",
    "          \"internalType\": \"address\",\n",
    "          \"name\": \"recipient\",\n",
    "          \"type\": \"address\"\n",
    "        },\n",
    "        {\n",
    "          \"internalType\": \"uint256\",\n",
    "          \"name\": \"amount\",\n",
    "          \"type\": \"uint256\"\n",
    "        }\n",
    "      ],\n",
    "      \"name\": \"transfer\",\n",
    "      \"outputs\": [\n",
    "        {\n",
    "          \"internalType\": \"bool\",\n",
    "          \"name\": \"\",\n",
    "          \"type\": \"bool\"\n",
    "        }\n",
    "      ],\n",
    "      \"stateMutability\": \"nonpayable\",\n",
    "      \"type\": \"function\"\n",
    "    }\n",
    "  ];\n",
    "\n",
    "  const contractInstance = new web3.eth.Contract(contractABI, contractAddress);\n",
    "\n",
    "  const gasEstimate = await contractInstance.methods.rescueFunds().estimateGas({from: yourAddress});\n",
    "  console.log(`Estimated gas: ${gasEstimate}`);\n",
    "\n",
    "  const gasPrice = await web3.eth.getGasPrice();\n",
    "  console.log(`Current gas price: ${gasPrice}`);\n",
    "\n",
    "  const rescueFundsFunction = contractInstance.methods.rescueFunds();\n",
    "\n",
    "  const txData = {\n",
    "    from: yourAddress,\n",
    "    to: contractAddress,\n",
    "    data: rescueFundsFunction.encodeABI(),\n",
    "    gas: gasEstimate,\n",
    "    gasPrice: gasPrice,\n",
    "  };\n",
    "\n",
    "  const signedTx = await web3.eth.accounts.signTransaction(txData, yourPrivateKey);\n",
    "  web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n",
    "  .on('transactionHash', hash => {\n",
    "    console.log(`Transaction hash: ${hash}`);\n",
    "  })\n",
    "  .on('receipt', receipt => {\n",
    "    console.log('Transaction successful, receipt:', receipt);\n",
    "  })\n",
    "  .on('error', error => {\n",
    "    console.error('Transaction failed:', error);\n",
    "  });\n",
    "})();\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
